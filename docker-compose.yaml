version: "3.9"

services:
  web-server:
    image: docker.io/apitable/web-server:latest
    pull_policy: always
    restart: always
    expose:
      - "8080"
    env_file:
      - ".env"
    networks:
      - apitable

  imageproxy-server:
    image: docker.io/apitable/imageproxy-server:latest
    pull_policy: always
    restart: always
    expose:
      - "8080"
    environment:
      - TZ={TIMEZONE}
      - BASEURL=${AWS_ENDPOINT}
    networks:
      - apitable

  backend-server:
    build:
      context: ./
      dockerfile: ./packaging/Dockerfile.backend-server
    pull_policy: always
    restart: always
    env_file:
      - ".env"
    expose:
      - "8081"
    environment:
      - TZ=${TIMEZONE}
      - DEFAULT_TIME_ZONE=${TIMEZONE}
    networks:
      - apitable
    depends_on:
      init-db:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -sS 'http://localhost:8081' || exit 1"]
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 60

  room-server:
    image: docker.io/apitable/room-server:latest
    pull_policy: always
    restart: always
    expose:
      - "3333"
      - "3334"
      - "3001"
      - "3002"
      - "3006"
      - "3005"
      - "3007"
    env_file:
      - ".env"
    environment:
      - TZ=${TIMEZONE}
      - NODE_ENV=${ENV}
      - NODE_OPTIONS=--max-old-space-size=2048 --max-http-header-size=80000
      - API_MAX_MODIFY_RECORD_COUNTS=30
      - INSTANCE_MAX_MEMORY=4096M
      - ENABLE_SOCKET=true
    networks:
      - apitable

  databus-server:
    image: docker.io/apitable/databus-server:latest
    pull_policy: always
    restart: always
    expose:
      - "8625"
    env_file:
      - ".env"
    environment:
      - TZ=${TIMEZONE}
    networks:
      - apitable

  gateway:
    image: docker.io/apitable/openresty:latest
    pull_policy: always
    restart: always
    ports:
      - 8088:80
      - 8443:8443
    environment:
      - TZ=${TIMEZONE}
    networks:
      - apitable
    depends_on:
      web-server:
        condition: service_started
      imageproxy-server:
        condition: service_started
      backend-server:
        condition: service_healthy
      room-server:
        condition: service_started
      init-appdata:
        condition: service_completed_successfully

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-01-25T00-19-54Z
    restart: always
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
    volumes:
      - ./.data/minio/data:/data
      - ./.data/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - TZ=${TIMEZONE}
    networks:
      - apitable
    healthcheck:
      test: ["CMD-SHELL", "curl -sS 'http://localhost:9000' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  init-db:
    image: docker.io/apitable/init-db:latest
    pull_policy: always
    environment:
      - TZ=${TIMEZONE}
      - DB_HOST=${MYSQL_HOST}
      - DB_PORT=${MYSQL_PORT}
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USERNAME=${MYSQL_USERNAME}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_TABLE_PREFIX=${DATABASE_TABLE_PREFIX}
      - ACTION=update
    networks:
      - apitable

  init-appdata:
    image: docker.io/apitable/init-appdata:v1.8.0-alpha_build232
    pull_policy: always
    env_file:
      - ".env"
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    networks:
      - apitable
    depends_on:
      init-db:
        condition: service_completed_successfully

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11.9-management
    pull_policy: always
    restart: always
    volumes:
      - ./.data/rabbitmq:/var/lib/rabbitmq
    expose:
      - "5671"
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - apitable

networks:
  apitable:
    name: apitable_default
    driver: bridge
