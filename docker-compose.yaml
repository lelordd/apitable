version: "3.9"

services:
  web-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_WEB_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    expose:
      - "8080"
    env_file:
      - "${ENV_FILE:-.env}"
    environment:
      - SERVER_DOMAIN=${DOMAIN}
      - API_PROXY=http://backend-server:8081
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-web.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.apitable-web.entrypoints=web,websecure"
      - "traefik.http.services.apitable-web.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - init-appdata

  imageproxy-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_IMAGEPROXY_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    expose:
      - "8080"
    environment:
      - TZ=${TIMEZONE}
      - BASEURL=${AWS_ENDPOINT}
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-imageproxy.rule=Host(`imageproxy-${DOMAIN}`)"
      - "traefik.http.routers.apitable-imageproxy.entrypoints=web,websecure"
      - "traefik.http.services.apitable-imageproxy.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_BACKEND_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    env_file:
      - "${ENV_FILE:-.env}"
    expose:
      - "8081"
    environment:
      - TZ=${TIMEZONE}
      - DEFAULT_TIME_ZONE=${TIMEZONE}
      - MYSQL_HOST=mysql
    command: "sleep 20"
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-backend.rule=Host(`backend-${DOMAIN}`)"
      - "traefik.http.routers.apitable-backend.entrypoints=web,websecure"
      - "traefik.http.services.apitable-backend.loadbalancer.server.port=8081"
    depends_on:
      - init-db
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  room-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_ROOM_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    expose:
      - "3333"
      - "3334"
      - "3001"
      - "3002"
      - "3006"
      - "3005"
      - "3007"
    env_file:
      - "${ENV_FILE:-.env}"
    environment:
      - TZ=${TIMEZONE}
      - NODE_ENV=${ENV}
      - NODE_OPTIONS=--max-old-space-size=2048 --max-http-header-size=80000
      - API_MAX_MODIFY_RECORD_COUNTS=${API_MAX_MODIFY_RECORD_COUNTS:-30}
      - INSTANCE_MAX_MEMORY=4096M
      - ENABLE_SOCKET=true
      - MYSQL_HOST=mysql
    command: "sleep 40"
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-room.rule=Host(`room-${DOMAIN}`)"
      - "traefik.http.routers.apitable-room.entrypoints=web,websecure"
      - "traefik.http.services.apitable-room.loadbalancer.server.port=3333"
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  databus-server:
    image: ${IMAGE_REGISTRY}/${IMAGE_DATABUS_SERVER}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    expose:
      - "8625"
    env_file:
      - "${ENV_FILE:-.env}"
    environment:
      - TZ=${TIMEZONE}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MYSQL_HOST=mysql
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    command: "sleep 60 && /usr/src/myapp/databus-server"
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-databus.rule=Host(`databus-${DOMAIN}`)"
      - "traefik.http.routers.apitable-databus.entrypoints=web,websecure"
      - "traefik.http.services.apitable-databus.loadbalancer.server.port=8625"
    depends_on:
      - mysql
      - redis
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    container_name: minio
    image: ${IMAGE_MINIO}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    command: server --console-address ":9001" /data
    expose:
      - "9000"
      - "9001"
    volumes:
      - ${DATA_PATH}/.data/minio/data:/data
      - ${DATA_PATH}/.data/minio/config:/root/.minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - TZ=${TIMEZONE}
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-minio.rule=Host(`minio-${DOMAIN}`)"
      - "traefik.http.routers.apitable-minio.entrypoints=web,websecure"
      - "traefik.http.services.apitable-minio.loadbalancer.server.port=9001"
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    container_name: redis
    image: redis:7.2
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    command:
      ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    expose:
      - "6379"
    volumes:
      - ${DATA_PATH}/.data/redis:/data
    environment:
      - TZ=${TIMEZONE}
    networks:
      - apitable
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    container_name: mysql
    image: mysql:8.0
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    volumes:
      - ${DATA_PATH}/.data/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=${TIMEZONE}
    command: [
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_general_ci",
      "--sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION"
    ]
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - apitable

  rabbitmq:
    container_name: rabbitmq
    image: ${IMAGE_RABBITMQ}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    restart: always
    volumes:
      - ${DATA_PATH}/.data/rabbitmq:/var/lib/rabbitmq
    expose:
      - "5671"
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - TZ=${TIMEZONE}
    networks:
      - apitable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apitable-rabbitmq.rule=Host(`rabbitmq-${DOMAIN}`)"
      - "traefik.http.routers.apitable-rabbitmq.entrypoints=web,websecure"
      - "traefik.http.services.apitable-rabbitmq.loadbalancer.server.port=15672"
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-db:
    image: ${IMAGE_REGISTRY}/${IMAGE_INIT_DB}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    environment:
      - TZ=${TIMEZONE}
      - DB_HOST=mysql
      - DB_PORT=${MYSQL_PORT}
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USERNAME=${MYSQL_USERNAME}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_TABLE_PREFIX=${DATABASE_TABLE_PREFIX}
      - ACTION=update
    networks:
      - apitable
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 10

  init-appdata:
    image: ${IMAGE_REGISTRY}/${IMAGE_INIT_APPDATA}
    pull_policy: ${IMAGE_PULL_POLICY:-if_not_present}
    env_file:
      - "${ENV_FILE:-.env}"
    environment:
      - MYSQL_HOST=mysql
    networks:
      - apitable
    depends_on:
      - mysql
      - init-db
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 3

networks:
  apitable:
    name: apitable_default
    driver: bridge
